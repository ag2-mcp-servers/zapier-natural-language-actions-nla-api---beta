# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:31:33+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ErrorResponse(BaseModel):
    error: str = Field(..., description='Error message.', title='Error')


class ExecuteRequest(BaseModel):
    instructions: str = Field(
        ...,
        description='Plain english instructions. Provide as much detail as possible.',
        title='Instructions',
    )
    preview_only: Optional[bool] = Field(
        False,
        description='If true, we will not execute the action, but will return the params of the preview.',
        title='Preview Only',
    )


class Status(Enum):
    success = 'success'
    error = 'error'
    empty = 'empty'
    preview = 'preview'


class ExecuteResponse(BaseModel):
    action_used: str = Field(
        ...,
        description='The name of the action that was executed.',
        title='Action Used',
    )
    error: Optional[str] = Field(
        None, description='The error message if the execution failed.', title='Error'
    )
    id: str = Field(..., description='The id of the execution log.', title='Id')
    input_params: Dict[str, Any] = Field(
        ...,
        description='The params we used / will use to execute the action.',
        title='Input Params',
    )
    result: Optional[Dict[str, Any]] = Field(
        None,
        description='A trimmed down result of the first item of the full results. Ideal for humans and language models!',
        title='Result',
    )
    review_url: str = Field(
        ...,
        description='The URL to run the action or review the AI choices the AI made for input_params given instructions.',
        title='Review Url',
    )
    status: Optional[Status] = Field(
        'success', description='The status of the execution.', title='Status'
    )


class ExposedActionSchema(BaseModel):
    description: str = Field(
        ..., description='Description of the action.', title='Description'
    )
    id: str = Field(..., description='The unique ID of the exposed action.', title='Id')
    operation_id: str = Field(
        ..., description='The operation ID of the exposed action.', title='Operation Id'
    )
    params: Dict[str, Any] = Field(
        ..., description='Available hint fields for the action.', title='Params'
    )


class ExposedActionResponseSchema(BaseModel):
    configuration_link: str = Field(
        ...,
        description='URL to configure and expose more actions.',
        title='Configuration Link',
    )
    results: List[ExposedActionSchema] = Field(..., title='Results')
